#!/usr/bin/python3

import os, subprocess, signal, socket
import typer
from ruamel.yaml import YAML
import json
import time

# User's home directory
homeDirectory = os.path.expanduser('~')

# remoteLabs directory inside the home directory
remoteLabsDirectory = os.path.join(homeDirectory, 'remoteLabs')

# setup directory inside the remoteLabs directory
setupDirectory = os.path.join(remoteLabsDirectory, 'setup')
# Path to settings file
settings_path = os.path.join(setup_path, ".settings.yml")
settings = {}
# I don't think we need this.
configs = {
    "raspicam": "uv4l-raspicam.conf",
    "uvc": "uv4l-uvc.conf"} 


def read_json():
    with open(settings_path, "r") as f:
        return json.load(f)

def update_json(settings):
    with open(settings_path, "w") as f:
        json.dump(settings, f)


#Setting up a lab requires
# - Creating the correct nginx remla.conf file and enabling it
def status(args):
    if settings["status"] == "None":
        print('No lab has been setup yet. Run "remla setup <lab>"')
        return
    if args.verbose:
        print("Current Lab is setup to run {0} on port {1} with {2} driver.".format(settings["status"], settings["port"], settings["driver"]))
    else:
        print("Current Lab is setup to run {0}".format(settings["status"]))

def setup(args):
    if not os.path.isdir(os.path.join(rl_path, args.lab)):
        print("ERROR: " + args.lab + " does not exist in the remoteLabs directory.")
        return
    try:
        configs[args.driver]
    except KeyError:
        print("The only drivers that are allowed are raspicam and uvc")
        return

    with open(os.path.join(setup_path, configs[args.driver]), "r") as f:
        config_contents = f.read()
    
    config_contents = config_contents.replace("<rootPath>", os.path.join(rl_path, args.lab))
    config_contents = config_contents.replace("<port>", args.port)
    config_contents = config_contents.replace("<uv4lPort>", args.uv4lPort)


    with open(os.path.join("/etc", "uv4l", configs[args.driver]), "w") as f:
        f.write(config_contents)
        
    controller_path = os.path.join(".", rl_path, args.lab, args.lab+"Controller.py" )
    os.system("sudo chmod +x " + controller_path)
    labSettingsFile = os.path.join(rl_path, args.lab, args.settings)


    
    settings["status"] = args.lab
    settings["driver"] = args.driver
    settings["port"] = args.port
    settings["settingsFile"] = labSettingsFile
    update_json(settings)
    

def run(args):
    if settings["status"] != "None":
        lab = settings["status"]
        driver = settings["driver"]
        labSettingsFile = settings["settingsFile"]
        configfile = configs[driver]
        flags = "-s {0}".format(labSettingsFile)
        if args.reset:
            flags += " -r"
        elif args.admin:
            flags += " -a"
        controllerFile = lab + "Controller.py"
        os.system("sudo killall uv4l")
        time.sleep(1)
        uv4l_cmd = "sudo uv4l --config-file=/etc/uv4l/" +configfile + " -d " + driver + " --driver-config-file=/etc/uv4l/" + configfile + " --enable-server yes"
        os.system(uv4l_cmd)

        if args.foreground:
            pythonFilePath = os.path.join(rl_path, lab, controllerFile)
            os.system("python3 {0} {1}".format(pythonFilePath, flags))
            # process=subprocess.Popen(["python3",os.path.join(rl_path, lab, controllerFile)])
        else:
            controller_path = os.path.join(".", rl_path, lab, controllerFile)
            cmd = ["nohup", controller_path]
            for argument in flags.split(" "):
                cmd.append(argument)
            process = subprocess.Popen(cmd)
             # os.system("nohup " + controller_path + " &")
            settings["pid"] = process.pid
            update_json(settings)

    else:
        print('No lab has been setup yet. Run "remla setup <lab>"')

def message(args):
    connection = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
    socket_path = "/tmp/remla.socket"
    try:
        connection.connect(socket_path)
        time.sleep(0.2)
        connection.send("Messenger/contactModal/show".encode())

    except socket.error as msg:
        print("Socket Error:  {0}".format(msg))
       

def stop(args):
    os.system("sudo pkill uv4l")
    time.sleep(1)
    try:
        os.kill(settings["pid"], signal.SIGINT)
    except:
        print("No python process was found. Killing uv4l only.")
        return
    print("Interupt signal sent. Please wait 60 seconds for shutdown to complete.")
    # os.system("sudo pkill python3")

def update(args):
    if os.path.exists(os.path.join(rl_path, "setup", "remla")):
        os.system("sudo mv /home/pi/remotelabs/setup/remla /usr/bin")
        os.system("sudo chmod +x /usr/bin/remla")
    else:
        print("No new remla file in setup directory to update with")


def restart(args):
    stop(args)
    print("\r\n ~~~~ Waiting 60 seconds before autostart ~~~~")
    time.sleep(60)
    run(args)

def git(args):
    stop(args)
    os.chdir(rl_path)
    os.system("git stash")
    time.sleep(0.3)
    os.system("git pull")
    time.sleep(2)
    setup(args)
    run(args)

def boot(args):
    connection = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
    socket_path = "/tmp/remla.socket"
    try:
        connection.connect(socket_path)
        time.sleep(0.2)
        connection.send("Messenger/bootModal/show".encode())

    except socket.error as msg:
        print("Socket Error:  {0}".format(msg))
    
    print("\r\n ~~~~  Waiting 10 seconds and restarting  ~~~~ \r\n")
    time.sleep(10)
    print("Restarting now!")
    restart(args)


settings = read_json()
parser = argparse.ArgumentParser(description="Tool to manage remote labs", prog="remla")

subparsers = parser.add_subparsers(title="commands")

parser_status = subparsers.add_parser("status")
parser_status.set_defaults(func=status)
parser_status.add_argument("-v", "--verbose", action="store_true")

parser_setup = subparsers.add_parser("setup")
parser_setup.set_defaults(func=setup)
parser_setup.add_argument('lab')
parser_setup.add_argument('-p', '--port', default="80")
parser_setup.add_argument("-d", '--driver', default="raspicam")
parser_setup.add_argument("-s", '--settings', required=True)
parser_setup.add_argument("-u", "--uv4lPort", default="8081")

parser_run = subparsers.add_parser("run")
parser_run.set_defaults(func=run)
parser_run.add_argument('-f', "--foreground", action="store_true")
group_run = parser_run.add_mutually_exclusive_group()
group_run.add_argument('-r', "--reset", action="store_true")
group_run.add_argument("-a", "--admin", action="store_true")

parser_stop = subparsers.add_parser("stop")
parser_stop.set_defaults(func=stop)

parser_message = subparsers.add_parser("message")
parser_message.set_defaults(func=message)

parser_update = subparsers.add_parser("update")
parser_update.set_defaults(func=update)

parser_restart = subparsers.add_parser("restart")
parser_restart.set_defaults(func=restart)
parser_restart.add_argument('-f', "--foreground", action="store_true")
group_restart = parser_restart.add_mutually_exclusive_group()
group_restart.add_argument('-r', "--reset", action="store_true")
group_restart.add_argument("-a", "--admin", action="store_true")

parser_git = subparsers.add_parser("git")
parser_git.set_defaults(func=git)
parser_git.add_argument('lab')
parser_git.add_argument('-p', '--port', default="80")
parser_git.add_argument("-d", '--driver', default="raspicam")
parser_git.add_argument("-s", '--settings', required=True)
parser_git.add_argument("-u", "--uv4lPort", default="8081")
parser_git.add_argument('-f', "--foreground", action="store_true")
group_git = parser_git.add_mutually_exclusive_group()
group_git.add_argument('-r', "--reset", action="store_true")
group_git.add_argument("-a", "--admin", action="store_true")

parser_boot = subparsers.add_parser("boot")
parser_boot.set_defaults(func=boot)
parser_boot.add_argument('-f', "--foreground", action="store_true")
group_boot = parser_boot.add_mutually_exclusive_group()
group_boot.add_argument('-r', "--reset", action="store_true")
group_boot.add_argument("-a", "--admin", action="store_true")


args = parser.parse_args()

try:
    args.func(args)
except AttributeError:
    pass

